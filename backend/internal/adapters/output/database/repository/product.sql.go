// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: product.sql

package repository

import (
	"context"
)

const count = `-- name: Count :one
SELECT count(*) FROM products
`

func (q *Queries) Count(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, count)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const create = `-- name: Create :one
INSERT INTO products (
  id, name, description, price
) VALUES ( $1, $2, $3, $4 )
RETURNING id, name, description, price
`

type CreateParams struct {
	ID          string  `json:"id"`
	Name        string  `json:"name"`
	Description string  `json:"description"`
	Price       float64 `json:"price"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (Product, error) {
	row := q.db.QueryRow(ctx, create,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Price,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
	)
	return i, err
}

const delete = `-- name: Delete :exec
DELETE FROM products
  WHERE id = $1
`

func (q *Queries) Delete(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, delete, id)
	return err
}

const find = `-- name: Find :many
SELECT id, name, description, price FROM products
LIMIT $1
OFFSET $2
`

type FindParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) Find(ctx context.Context, arg FindParams) ([]Product, error) {
	rows, err := q.db.Query(ctx, find, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAll = `-- name: FindAll :many
SELECT id, name, description, price FROM products
`

func (q *Queries) FindAll(ctx context.Context) ([]Product, error) {
	rows, err := q.db.Query(ctx, findAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findByID = `-- name: FindByID :one
SELECT id, name, description, price
  FROM products
  WHERE id = $1
`

func (q *Queries) FindByID(ctx context.Context, id string) (Product, error) {
	row := q.db.QueryRow(ctx, findByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
	)
	return i, err
}

const update = `-- name: Update :one
UPDATE products
  SET name = $2,
  description = $3,
  price = $4
  WHERE id = $1
  RETURNING id, name, description, price
`

type UpdateParams struct {
	ID          string  `json:"id"`
	Name        string  `json:"name"`
	Description string  `json:"description"`
	Price       float64 `json:"price"`
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) (Product, error) {
	row := q.db.QueryRow(ctx, update,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Price,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
	)
	return i, err
}
